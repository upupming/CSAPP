# Execution begins at address 0
	.pos	0
	irmovq	stack, %rsp
	call	main
	halt

# Source block
	.align 8
src:
	.quad 0x00a
	.quad 0x0b0
	.quad 0xc00
# Destination block
dest:
	.quad 0x111
	.quad 0x222
	.quad 0x333
	
main:
	irmovq	src, %rdi
	irmovq	dest, %rsi
	irmovq	$3, %rdx
	call	copy_block
	ret

# long copy_block(long *src, long *dest, long len)
# src in %rdi, dest in %rsi, len in %rdx
copy_block:
	irmovq	$0, %rax
	jmp		test_len
copy_loop:
	mrmovq	(%rdi), %rcx
	rmmovq	%rcx, (%rsi)		# src to dest
	xorq	%rcx, %rax			# result ^= val
	irmovq	$1, %r8
	subq	%r8, %rdx			# len--
	irmovq	$8, %r8
	addq	%r8, %rsi
	addq	%r8, %rdi
test_len:
	andq	%rdx, %rdx
	jg		copy_loop
	ret
	
	.pos	0x200
stack:
