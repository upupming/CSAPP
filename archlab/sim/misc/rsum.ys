# Execution begins at address 0
	.pos	0
	irmovq	stack, %rsp
	call	main
	halt

# Sample linked list
.align 8
ele1:
    .quad 0x00a
    .quad ele2
ele2:
    .quad 0x0b0
    .quad ele3
ele3:
    .quad 0xc00
    .quad 0

main:
	irmovq	ele1, %rdi
	call	rsum_list
	ret

# long rsum_list(list_ptr ls)
# ls in %rdi
rsum_list:
	andq	%rdi, %rdi
	je		return_0		# if ls==NULL, return_0
	mrmovq	(%rdi), %r8		# ls->val
	mrmovq	8(%rdi), %rdi	# ls = ls->next
	pushq	%r8
	call	rsum_list		# recursive
	popq	%r8
	addq	%r8, %rax		# ls->val + rsum_list(ls->next)
	ret
return_0:
	irmovq	$0, %rax
	ret
	
# Stack starts here and grows to lower address
	.pos	0x200
stack:
