#######################################################################
# Test for copying block of size 40;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $40, %rdx		# src and dst have 40 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
################################################################## 
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# 李一鸣			1160300625
# Describe how and why you modified the baseline code.
# 1. use iaddq.
# 2. unroll loop.
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
		xorq %rax,%rax		# count = 0;

		rrmovq %rdx, %rcx	# copy len
        
		jmp judge8
		
		
##################################################################
##################### for len >= 2，每2个元素进行一次循环
Loop3:        				
        mrmovq (%rdi), %r8		# 0
        mrmovq 8(%rdi), %r9		# 1
        rmmovq %r8, (%rsi)		
        rmmovq %r9, 8(%rsi)		
ele3_1:   
		andq %r8, %r8           # val <= 0?
        jle ele3_2              # if so, goto ele3_2:
        iaddq $1, %rax          # count++, %rax         
ele3_2:   
		andq %r9, %r9          
        jle Npos3
        iaddq $1, %rax
Npos3:  
		iaddq $16, %rdi         # src++，关键优化，2次合一
        iaddq $16, %rsi         # dst++
        iaddq $-2, %rdx         # len--
        iaddq $-2, %rcx         # (len-2)--
        jge Loop3                # if len>=2, goto Loop3:
		iaddq $1, %rcx
		jge	Loop_rest			# len>=1
		jmp Done
#################################################################		

		
##################################################################
##################### for len >= 4，每4个元素进行一次循环
Loop2:        				
        mrmovq (%rdi), %r8		# 0
        mrmovq 8(%rdi), %r9		# 1
        mrmovq 16(%rdi), %r10	# 2
        mrmovq 24(%rdi), %r11	# 3
        rmmovq %r8, (%rsi)		
        rmmovq %r9, 8(%rsi)		
        rmmovq %r10, 16(%rsi)	
        rmmovq %r11, 24(%rsi)	
ele2_1:   
		andq %r8, %r8           # val <= 0?
        jle ele2_2              # if so, goto ele2_2:
        iaddq $1, %rax          # count++, %rax         
ele2_2:   
		andq %r9, %r9          
        jle ele2_3
        iaddq $1, %rax
ele2_3:   
		andq %r10, %r10
        jle ele2_4
        iaddq $1, %rax
ele2_4:   
		andq %r11, %r11
        jle Npos2
        iaddq $1, %rax
Npos2:  
		iaddq $32, %rdi         # src++，关键优化，4次合一
        iaddq $32, %rsi         # dst++
        iaddq $-4, %rdx         # len--
        iaddq $-4, %rcx         # (len-4)--
        jge Loop2                # if len>=4, goto Loop2:
		iaddq $2, %rcx			
		jge Loop3				# len >=2
		iaddq $1, %rcx			
		jge Loop_rest			# len >=1
		jmp Done
#################################################################		
		
##################################################################
##################### for len >= 8，每8个元素进行一次循环
Loop1:        				
        mrmovq (%rdi), %r8		# 0
        mrmovq 8(%rdi), %r9		# 1
        mrmovq 16(%rdi), %r10	# 2
        mrmovq 24(%rdi), %r11	# 3
        mrmovq 32(%rdi), %r12	# 4
        mrmovq 40(%rdi), %r13	# 5
        mrmovq 48(%rdi), %r14	# 6
        mrmovq 56(%rdi), %rbx	# 7
        rmmovq %r8, (%rsi)		
        rmmovq %r9, 8(%rsi)		
        rmmovq %r10, 16(%rsi)	
        rmmovq %r11, 24(%rsi)	
        rmmovq %r12, 32(%rsi)
        rmmovq %r13, 40(%rsi)
        rmmovq %r14, 48(%rsi)
        rmmovq %rbx, 56(%rsi)
ele1:   
		andq %r8, %r8           # val <= 0?
        jle ele2               	# if so, goto ele2:
        iaddq $1, %rax          # count++, %rax         
ele2:   
		andq %r9, %r9          
        jle ele3
        iaddq $1, %rax
ele3:   
		andq %r10, %r10
        jle ele4
        iaddq $1, %rax
ele4:   
		andq %r11, %r11
        jle ele5
        iaddq $1, %rax
ele5:   
		andq %r12, %r12
        jle ele6
        iaddq $1, %rax
ele6:   
		andq %r13, %r13
        jle ele7
        iaddq $1, %rax
ele7:   
		andq %r14, %r14
        jle ele8
        iaddq $1, %rax
ele8:   
		andq %rbx, %rbx
        jle Npos1
        iaddq $1, %rax
Npos1:  
		iaddq $64, %rdi         # src++，关键优化，8次合一
        iaddq $64, %rsi         # dst++
        iaddq $-8, %rdx         # len--
judge8:        
		iaddq $-8, %rcx         # (len-8)--
        jge Loop1                # if len>=8, goto Loop1:		
		iaddq $4, %rcx
		jge	Loop2				# len >=4
		iaddq $2, %rcx			
		jge Loop3				# len >=2
		iaddq $1, %rcx
		jge Loop_rest			# len >=1
		jmp Done
#################################################################
###########多出来的部分，1个元素
Loop_rest:	
		mrmovq (%rdi), %rbx		# read val from src...
		rmmovq %rbx, (%rsi)		# ...and store it to dst
		andq %rbx, %rbx			# val <= 0?
		jle Done		# if so, goto Npos_reminder:
		iaddq $1, %rax			# count++
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 18.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $18,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $40,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad 2
	.quad -3
	.quad -4
	.quad -5
	.quad 6
	.quad -7
	.quad -8
	.quad -9
	.quad 10
	.quad 11
	.quad -12
	.quad -13
	.quad -14
	.quad 15
	.quad -16
	.quad -17
	.quad 18
	.quad 19
	.quad -20
	.quad -21
	.quad 22
	.quad 23
	.quad 24
	.quad -25
	.quad -26
	.quad 27
	.quad -28
	.quad -29
	.quad -30
	.quad -31
	.quad -32
	.quad 33
	.quad 34
	.quad 35
	.quad -36
	.quad 37
	.quad -38
	.quad 39
	.quad 40
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
