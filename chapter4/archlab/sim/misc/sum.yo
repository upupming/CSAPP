                            | # Execution begins at address 0
0x000:                      | 	.pos 0
0x000: 30f40002000000000000 | 	irmovq	stack, %rsp		# Setup stack pointer
0x00a: 804800000000000000   | 	call main				# Execute main program
0x013: 00                   | 	halt					# Terminate program
                            | 
                            | # Sample linked list
0x018:                      | .align 8
0x018:                      | ele1:
0x018: 0a00000000000000     | 	.quad 0x00a
0x020: 2800000000000000     | 	.quad ele2
0x028:                      | ele2:
0x028: b000000000000000     | 	.quad 0x0b0
0x030: 3800000000000000     | 	.quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     | 	.quad 0xc00
0x040: 0000000000000000     | 	.quad 0
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 | 	irmovq	ele1, %rdi
0x052: 805c00000000000000   | 	call	sum_list		# sum_list(ele1)
0x05b: 90                   | 	ret
                            | 
                            | # long sum_list(list_ptr ls)
                            | # ls in %rdi
0x05c:                      | sum_list:
0x05c: 30f00000000000000000 | 	irmovq	$0, %rax
0x066: 708500000000000000   | 	jmp		loop_test
0x06f:                      | loop:
0x06f: 50870000000000000000 | 	mrmovq	(%rdi), %r8		
0x079: 6080                 | 	addq	%r8, %rax		# add ls->val to val
0x07b: 50770800000000000000 | 	mrmovq	8(%rdi), %rdi	# update %rdi to ls->next
0x085:                      | loop_test:
0x085: 6277                 | 	andq	%rdi, %rdi		
0x087: 746f00000000000000   | 	jne		loop			# if ls!=NULL, loop
0x090: 90                   | 	ret
                            | 
                            | # Stack starts here and grows to lower adderss
0x200:                      | 	.pos	0x200
0x200:                      | stack:
