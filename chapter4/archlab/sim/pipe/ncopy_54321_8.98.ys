#/* $begin ncopy-ys */
################################################################## 
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# 李一鸣			1160300625
# Describe how and why you modified the baseline code.
# 1. use iaddq.
# 2. unroll loop.
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
		xorq %rax,%rax		# count = 0;

		rrmovq %rdx, %rcx	# copy len
judge5:
		iaddq $-5, %rcx 	
		jge Loop5			# len >= 5
judge4:
		iaddq $1, %rcx		
		jge	Loop4			# len >= 4
judge3:
		iaddq $1, %rcx		
		jge	Loop3			# len >= 3
judge2:		
		iaddq $1, %rcx		
		jge	Loop2			# len >= 2
judge1:		
		iaddq $1, %rcx 
		jge Loop_rest		# len >= 1
		
		jmp Done			# len <=0 
		
		
##################################################################
##################### for len >= 2，每2个元素进行一次循环
Loop2:        				
        mrmovq (%rdi), %r8		# 0
        mrmovq 8(%rdi), %r9		# 1
        rmmovq %r8, (%rsi)		
        rmmovq %r9, 8(%rsi)		
ele2_1:   
		andq %r8, %r8           # val <= 0?
        jle ele2_2              # if so, goto ele2_2:
        iaddq $1, %rax          # count++, %rax         
ele2_2:   
		andq %r9, %r9          
        jle Npos2
        iaddq $1, %rax
Npos2:  
		iaddq $16, %rdi         # src++，关键优化，2次合一
        iaddq $16, %rsi         # dst++
        iaddq $-2, %rdx         # len--
        iaddq $-2, %rcx         # (len-2)--
        jge Loop2                # if len>=2, goto Loop2:
		jmp judge1
#################################################################		


##################################################################
##################### for len >= 3，每3个元素进行一次循环
Loop3:        				
        mrmovq (%rdi), %r8		# 0
        mrmovq 8(%rdi), %r9		# 1
        mrmovq 16(%rdi), %r10	# 2
        rmmovq %r8, (%rsi)		
        rmmovq %r9, 8(%rsi)		
        rmmovq %r10, 16(%rsi)	
ele3_1:   
		andq %r8, %r8           # val <= 0?
        jle ele3_2              # if so, goto ele3_2:
        iaddq $1, %rax          # count++, %rax         
ele3_2:   
		andq %r9, %r9          
        jle ele3_3
        iaddq $1, %rax
ele3_3:   
		andq %r10, %r10
        jle Npos3
        iaddq $1, %rax
Npos3:  
		iaddq $24, %rdi         # src++，关键优化，3次合一
        iaddq $24, %rsi         # dst++
        iaddq $-3, %rdx         # len--
        iaddq $-3, %rcx         # (len-3)--
        jge Loop3                # if len>=3, goto Loop3:
		jmp judge2
#################################################################		
		
		
##################################################################
##################### for len >= 4，每4个元素进行一次循环
Loop4:        				
        mrmovq (%rdi), %r8		# 0
        mrmovq 8(%rdi), %r9		# 1
        mrmovq 16(%rdi), %r10	# 2
        mrmovq 24(%rdi), %r11	# 3
        rmmovq %r8, (%rsi)		
        rmmovq %r9, 8(%rsi)		
        rmmovq %r10, 16(%rsi)	
        rmmovq %r11, 24(%rsi)	
ele4_1:   
		andq %r8, %r8           # val <= 0?
        jle ele4_2              # if so, goto ele4_2:
        iaddq $1, %rax          # count++, %rax         
ele4_2:   
		andq %r9, %r9          
        jle ele4_3
        iaddq $1, %rax
ele4_3:   
		andq %r10, %r10
        jle ele4_4
        iaddq $1, %rax
ele4_4:   
		andq %r11, %r11
        jle Npos4
        iaddq $1, %rax
Npos4:  
		iaddq $32, %rdi         # src++，关键优化，4次合一
        iaddq $32, %rsi         # dst++
        iaddq $-4, %rdx         # len--
        iaddq $-4, %rcx         # (len-4)--
        jge Loop4                # if len>=4, goto Loop4
		jmp judge3
#################################################################		
		
##################################################################
##################### for len >= 5，每5个元素进行一次循环
Loop5:        				
        mrmovq (%rdi), %r8		# 0
        mrmovq 8(%rdi), %r9		# 1
        mrmovq 16(%rdi), %r10	# 2
        mrmovq 24(%rdi), %r11	# 3
        mrmovq 32(%rdi), %r12	# 4
        rmmovq %r8, (%rsi)		
        rmmovq %r9, 8(%rsi)		
        rmmovq %r10, 16(%rsi)	
        rmmovq %r11, 24(%rsi)	
        rmmovq %r12, 32(%rsi)
ele5_1:   
		andq %r8, %r8           # val <= 0?
        jle ele5_2              # if so, goto ele5_2:
        iaddq $1, %rax          # count++, %rax         
ele5_2:   
		andq %r9, %r9          
        jle ele5_3
        iaddq $1, %rax
ele5_3:   
		andq %r10, %r10
        jle ele5_4
        iaddq $1, %rax
ele5_4:   
		andq %r11, %r11
        jle ele5_5
        iaddq $1, %rax
ele5_5:   
		andq %r12, %r12
        jle Npos5
        iaddq $1, %rax
Npos5:  
		iaddq $40, %rdi         # src++，关键优化，5次合一
        iaddq $40, %rsi         # dst++
        iaddq $-5, %rdx         # len--
        iaddq $-5, %rcx         # (len-8)--
        jge Loop5               # if len>=8, goto Loop1
		jmp judge4
#################################################################
###########多出来的部分，1个元素
Loop_rest:	
		mrmovq (%rdi), %rbx		# read val from src...
		rmmovq %rbx, (%rsi)		# ...and store it to dst
		andq %rbx, %rbx			# val <= 0?
		jle Done				# if so, goto Done
		iaddq $1, %rax			# count++
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
